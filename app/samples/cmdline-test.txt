  <xsl:template match=#qt;pre[exists(@lang) and not(@lang = ('xpath','xquery'))]#qt;>#nl;<xsl:variable name=#qt;is-xsl#qt; select=#qt;@lang eq 'xslt'#qt; as=#qt;xs:boolean#qt;/>#nl;<xsl:variable name=#qt;prefix#qt; select=#qt;(@data-prefix, '')[1]#qt; as=#qt;xs:string#qt;/>#nl;<xsl:variable name=#qt;context-indent#qt; select=#qt;if (exists(@data-indent))#nl;then xs:integer(@data-indent)#nl;else $indent-size#qt;/>#nl;<xsl:copy>#nl;<xsl:attribute name=#qt;class#qt; select=#qt;'spectrum'#qt;/>#nl;<xsl:apply-templates select=#qt;@* except @class#qt;/>#nl;<xsl:variable name=#qt;real-trim#qt; as=#qt;xs:boolean#qt;#nl;select=#qt;if (exists(@data-trim))#nl;then @data-trim='yes'#nl;else $do-trim#qt;/>#nl;<xsl:choose>#nl;<xsl:when test=#qt;$real-trim or $context-indent gt 0#qt;>#nl;<xsl:variable name=#qt;renderedXML#qt; select=#qt;f:render(., @lang, $prefix)#qt;#nl;as=#qt;element()*#qt;/>#nl;<xsl:sequence select=#qt;f:indent($renderedXML, $context-indent, $real-trim)#qt;/>#nl;</xsl:when>#nl;<xsl:otherwise>#nl;<xsl:sequence select=#qt;f:render(., @lang, $prefix)#qt;/>#nl;</xsl:otherwise>#nl;</xsl:choose>#nl;</xsl:copy>#nl;  </xsl:template>

